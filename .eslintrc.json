{
  "root": true,

  "parser": "babel-eslint",

  "env": {
    "browser": true,
    "commonjs": true,
    "es6": true,
    "node": true
  },

  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module"
  },

  "extends": [
    "eslint:recommended",
    "eslint-config-google"
  ],

  "globals": {
    "Blockly": true,
    "goog": true
  },

  "settings": {
    "jsdoc": {
      "tagNamePreference": {
        "returns": "return"
      },
      "mode": "closure"
    }
  },

  "rules": {
    // http://eslint.org/docs/rules/
    "arrow-parens": "off",
    "camelcase": "warn",
    "new-cap": ["error", {"capIsNewExceptionPattern": "^.*Error"}],
    "no-warning-comments": "warn",
    "no-invalid-this": "off",
    "require-jsdoc": "off",
    "max-len": [
      "error",
      {
        "code": 85,
        "ignorePattern": "import.*"
      }
    ],
    "valid-jsdoc": "off"
  },
  "overrides": [
    {
      "files": ["**/*.mocha.js"],
      "env": {
        "mocha": true
      },
      "rules": {
        "max-len": [
          "error",
          {
            "ignoreStrings": true
          }
        ]
      }
    },
    {
      "files": ["**/*.ts"],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "ecmaVersion": 6,
        "sourceType": "module",

        // typescript-eslint specific options
        "warnOnUnsupportedTypeScriptVersion": true
      },
      "plugins": ["@typescript-eslint"],

      // If adding a typescript-eslint version of an existing ESLint rule,
      // make sure to disable the ESLint rule here.
      "rules": {

        // Already handled by tsc.
        "no-dupe-class-members": "off",
        "no-undef": "off",

        // Add TypeScript specific rules (and turn off ESLint equivalents)
        "@typescript-eslint/array-type": ["error",
          {
            "default": "array-simple"
          }
        ],
        "@typescript-eslint/ban-ts-ignore": "error",
        "@typescript-eslint/ban-types": ["error",
          {
            "types": {
              "Object": {
                "message": "Use {} or \"object\" instead."
              },
              "String": {
                "message": "Use \"string\" instead."
              },
              "Number": {
                "message": "Use \"number\" instead."
              },
              "Boolean": {
                "message": "Use \"boolean\" instead."
              }
            }
          }
        ],
        "camelcase": "off",
        "@typescript-eslint/camelcase": "warn",
        "@typescript-eslint/naming-convention": ["error",
          {
            "selector": "class",
            "format": ["PascalCase"]
          }
        ],
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/interface-name-prefix": "error",
        "@typescript-eslint/member-delimiter-style": ["error",
          {
            "multiline": {
              "delimiter": "semi",
              "requireLast": true
            },
            "singleline": {
              "delimiter": "semi",
              "requireLast": false
            }
          }
        ],

        "no-array-constructor": "off",
        "@typescript-eslint/no-array-constructor": "error",

        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-explicit-any": "warn",
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-non-null-assertion": "warn",
        "@typescript-eslint/no-this-alias": "error",

        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": ["warn", {"args": "none"}],

        "@typescript-eslint/no-var-requires": "error",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "@typescript-eslint/triple-slash-reference": "error",
        "@typescript-eslint/type-annotation-spacing": "error",

        "@typescript-eslint/consistent-type-definitions": "error",
        "@typescript-eslint/explicit-member-accessibility": ["error",
          {"accessibility": "no-public"}],
        "@typescript-eslint/no-require-imports": "error",
        "@typescript-eslint/semi": ["error", "always"]
      }
    }
  ]
}
